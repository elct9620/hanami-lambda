module Hanami
  module Lambda
    class Env
      @event: Hash[::String, String? | Hash]

      @headers: Hash[::String, ::String]

      @content_type: ::String

      @http_headers: Hash[::String, ::String]

      @context: Object

      def initialize: (event: Hash[::String, String? | Hash], headers: Hash[::String, ::String], context: Object) -> void

      # Build a hash of the Rack environment
      #
      # @return [Hash] the hash of Rack environment
      #
      def to_h: () -> ::Hash[::String?, (::String? | Hash[::String, String? | Hash] | Object)]

      private

      def extract_content_type: () -> ::String?

      def transform_http_headers: () -> Hash[::String, ::String]
    end
  end
end
